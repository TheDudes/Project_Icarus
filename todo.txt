+-----------------------------------------------------------------------------+
| +-------------------------------------------------------------------------+ |
| |                                 TODO                                    | |
| +-------------------------------------------------------------------------+ |
+-----------------------------------------------------------------------------+

-------------------------------------------------------------------------------
all:

[ !! ]  -> import Icarus.Main;  ->  Main.exit();
[done]  -> fix most of the warnings
[done]  -> get interpreter to run
-------------------------------------------------------------------------------
linc:

        -> add Log_keywords
        -> add engine keywords
        -> maybe source option for multiple files
        -> config key - to show/hide values
[ !! ]  -> update example_config
[done]  -> check for possible wrong values and print error
-------------------------------------------------------------------------------
csb/linc:

[ !! ]  -> kill()
[ !! ]  -> change ERROR messages on system exit
        -> if there is a kill() with lbq/socket, throw him a bone
[done]  -> get IO to work
-------------------------------------------------------------------------------
linc/tux:

        -> lib feature maybe
        -> fix all warnings
-------------------------------------------------------------------------------
tux:

[ !! ]  -> log key parser parser
[ !! ]  -> log key buggy (no [], parser mergefiles or something like that
[ !! ]  -> exception handling
        -> String " ... " implementation for PRINT function
        -> fix exception throwing
        -> fix but with replacing true on for loop
        -> add newlines to ur ERROR messages. double newline on end
[done]  -> implement case
[done]  -> fix case on ELSE or END_CASE
[done]  -> implement functions
[done]  -> implement new log
[done]  -> implement Error
-------------------------------------------------------------------------------
d4ryus:

[ !! ]  -> fixme on Exceptions which are thrown by parser
[ !! ]  -> fixme/Exception handling
[ !! ]  -> configureable takt sleep +/-
[ !! ]  -> awesome print functions with "info dump"
[ !! ]  -> awesome status print of average takt after 1/5/10 min etc
[ !! ]  -> awesome print function of a value that changed to be nsa 2.0
        -> check how function returning works
        -> create error message, then print
        -> make list of stuff we can do now
        -> make list of stuff we cannot do
[done]  -> add something like a "goto exit" to cleanup all threads
[done]  -> change log keys
[done]  -> implement takt_frequency
[done]  -> fix bug with only one log file
[done]  -> fix engine warmup count
[done]  -> add flag for showing statusbar
[done]  -> if no log backup is specified log to the same file
[done]  -> fix exception with lowercase letters on log size
[done]  -> add oportunity to specify log file size with full names
[done]  -> add error message for log file size
[done]  -> add error message to log
[done]  -> functions with return value
[done]  -> string "" implementation for PRINT method
[done]  -> implement ERROR messages
[done]  -> fix error message on Engine code
[done]  -> remove unused branches
[done]  -> move not need files from branches up to root branch
[done]  -> fix all warnings
[done]  -> fix all imports to be in the same order
[done]  -> add log.exit to all system.exit
[done]  -> fix statusbar now showing 100%
[done]  -> make list of all warnings
[meet]  -> try out new logging method
-------------------------------------------------------------------------------
else:

        -> verbosity 0: error and startup
                     1: PRINT messages, on terminal?
                     2: init of objects?
                     3: even more
                     4: fucking everything
[done]  -> change all logs to non deprecated version!
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
just information from here:
-------------------------------------------------------------------------------
function-declaration------------
FUNCTION [name] : [type of return value]
    VAR
        [var code]
    END_VAR
    [function code]
END_FUNCTION
example-function----------------
FUNCTION SIMPLE_FUN : REAL
    VAR_INPUT
        A : REAL;
        B : REAL;
        C : REAL := 1.0;
    END_VAR
    VAR_IN_OUT
        COUNT : INT;
    END_VAR
    VAR
        COUNTP! : INT;
    END_VAR
    /* wtf is this shit btw? add? fuck you... */
    COUNTP1 := ADD(COUNT,1);
    /* better go for COUNTP1 := COUNT + 1; */
    COUNT   := COUNTP1;
    SIMPLE_FUN := A*B/C;
END_FUNCTION
end-example-function------------
-------------------------------------------------------------------------------
